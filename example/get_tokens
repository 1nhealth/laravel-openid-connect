#!/usr/bin/php
<?php

error_reporting(E_ERROR);

class Crawler
{
    public function randomString(int $length)
    {
        $string = '';
        while (($len = strlen($string)) < $length) {
            $size = $length - $len;
            $bytes = random_bytes($size);
            $string .= substr(str_replace(['/', '+', '='], '', base64_encode($bytes)), 0, $size);
        }
        return $string;
    }

    public function codeVerifier(): string
    {
        $randomString = base64_encode(openssl_random_pseudo_bytes(32));
        return strtr(rtrim($randomString, '='), '+/', '-_');
    }

    public function codeChallenge(string $codeVerifier): string
    {
        $encoded = base64_encode(hash('sha256', $codeVerifier, true));
        return strtr(rtrim($encoded, '='), '+/', '-_');
    }

    public function httpRequest($url, array $params, $post = false)
    {
        $streamContext['http']['max_redirects'] = 1;

        $params = http_build_query($params);
        if ($post) {
            $streamContext['http']['method'] = 'POST';
            $streamContext['http']['content'] = $params;
        } else {
            $url .= '?' . $params;
        }

        $contents = file_get_contents($url, false, stream_context_create($streamContext));

        foreach ($http_response_header as $responseHeader) {
            if (substr($responseHeader, 0, 10) == 'Location: ') {
                return substr($responseHeader, 10);
            }
        }

        return $contents;
    }

    public function parseJwt(string $jwt)
    {
        $exploded = explode('.', $jwt);
        return json_decode(base64_decode($exploded[1]));
    }
}

$crawler = new Crawler();

/**
 * Url to where we have to GET the Auth Code using a code_challenge.
 */
$authorizationUrl = 'http://localhost:8000/authorize';

/**
 * The URL to where we have to POST the code_verifier to get the tokens.
 */
$tokensUrl = 'http://localhost:8000/tokens';

/**
 * The callback URL of the client.
 * In this example, we don't use that functionality.
 */
$redirectUrl = 'http://example.com/callback';

/**
 * The client ID, given by the Auth Provider.
 */
$clientId = '1';

/**
 * The scopes you want to collect.
 * Add `openid` to get an id_token.
 * Provide more scopes to receive additional claims in the `id_token`.
 */
$scopes = 'openid profile email';

/**
 * The state is sent to the auth provider and back.
 * If these states don't match, the provider is calling us directly.
 */
$state = $crawler->randomString(40);

/**
 * A verifier string which will be used to create a code_challenge.
 */
$codeVerifier = $crawler->codeVerifier();

/**
 * A hashed code, using the code_verifier to send to the Auth Provider.
 */
$codeChallenge = $crawler->codeChallenge($codeVerifier);

/**
 * Do the authorization request.
 */
$redirectParams = $crawler->httpRequest($authorizationUrl, [
    'client_id' => (string) $clientId,
    'redirect_uri' => $redirectUrl,
    'response_type' => 'code',
    'scope' => $scopes,
    'state' => $state,
    'code_challenge' => $codeChallenge,
    'code_challenge_method' => 'S256',
]);

if (!$redirectParams) {
    throw new Exception('No redirect received!');
}

/**
 * We expect a redirect URL after requesting the auth code.
 * 1. We should verify the $_GET['state'] with our $state
 * 2. We should post back the $_GET['code'] and our code_verifier
 */
$callbackComponents = parse_url($redirectParams);
parse_str($callbackComponents['query'], $callbackQuery);

if (!$code = $callbackQuery['code']) {
    throw new Exception('Code not found!');
}

if (!$receivedState = $callbackQuery['state']) {
    throw new Exception('State not found!');
}

if ($state !== $receivedState) {
    throw new Exception('States do not match!');
}

/**
 * Now we can post the $_GET['code'] to request the tokens.
 */
$content = $crawler->httpRequest($tokensUrl, [
    'grant_type' => 'authorization_code',
    'client_id' => (string) $clientId,
    'redirect_uri' => $redirectUrl,
    'code_verifier' => $codeVerifier,
    'code' => $code,
], true);

if (!$content) {
    throw new Exception('No token response received');
}

$content = json_decode($content, true);
if (!$content) {
    throw new Exception('No valid json received');
}

$dump = array_merge($content, [
    'parsed_access_token' => $crawler->parseJwt($content['access_token']),
]);

if (isset($content['id_token'])) {
    $dump['parsed_id_token'] = $crawler->parseJwt($content['id_token']);
}

print_r($dump);
